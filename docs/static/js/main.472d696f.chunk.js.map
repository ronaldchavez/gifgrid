{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifts","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEdC,EAFc,iDAEmCC,UAAWH,GAF9C,+DAIDI,MAAOF,GAJN,cAIdG,EAJc,gBAMGA,EAAKC,OANR,uBAMZC,EANY,EAMZA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAZtB,kBAgBbM,GAhBa,4CAAH,sDCERO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAEjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAMA,EAAN,WCsBGO,EAzBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEf,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAW,WACPxB,EAAUC,GACLwB,MAAM,SAAAC,GAAI,OAAIH,EAAS,CACIf,KAAMkB,EACNL,SAAS,SAG1C,CAAEpB,IAEEqB,EDd0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GACR,OAAO,cAAC,EAAD,eAEUA,GADCA,EAAIC,aEc/BgB,EA5BM,WAIjB,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEGA,SAAWA,GADLA,YCdlC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.472d696f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats ] ); \n            setInputValue('');\n        }\n   \n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange  }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n};\n\nexport default AddCategory;\n","export const getGifts = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=XwMKwKfCxjOnK44QCh6NzztR4IOhWmna`;\n\n    const resp = await fetch( url );\n\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n\n};","import React from 'react'\n\nexport const GifGridItem = ({ title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p> { title } </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs( category );\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\n\n            <div className=\"card-grid\">       \n                    {\n                    images.map( img => {\n                        return <GifGridItem \n                                    key={ img.id }\n                                    { ...img } \n                                />\n                    }) \n                    }\n                \n            </div>\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react'\n\nimport { getGifts } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        getGifts( category )\n            .then( imgs => setstate({\n                                        data: imgs,\n                                        loading: false\n                                    })\n                )\n    }, [ category ]);\n\n    return state;\n\n}\n","import React, { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\nconst GitExpertApp = () => {\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n\n    const [categories, setCategories] = useState(['Dragon Ball']);\n\n    return (\n        <>\n            <h2>GitExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => \n                         <GifGrid \n                            key={ category }\n                            category={ category } \n                        />\n                    )\n                }\n            </ol>\n\n        </>\n    );\n\n};\n\nexport default GitExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GitExpertApp from './components/GitExpertApp';\n\nReactDOM.render(\n  <GitExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}